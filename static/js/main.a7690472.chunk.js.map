{"version":3,"sources":["component/Tile/Tile.js","component/Grid/Grid.js","component/ButtonGroup/ButtonGroup.js","component/ControlGroup/ControlGroup.js","component/Modal/Modal.js","component/OptionGrid/OptionGrid.js","utils/saveImage.js","utils/genGrid.js","utils/undoRedo.js","App.js","serviceWorker.js","index.js"],"names":["Tile","props","bgColor","background","className","onMouseEnter","onMouseDown","style","value","Grid","grid","onMouseUp","changeColor","clickColor","map","row","i","key","color","j","ButtonGroup","state","showPalette","togglePalette","bind","this","setState","hex","getColor","e","newArt","clearGrid","isUndo","handleUndo","isRedo","handleRedo","saveImage","title","onClick","icon","faFile","onOutsideClick","onChange","faEraser","disabled","faUndoAlt","faRedoAlt","faDownload","React","Component","ControlGroup","name","changeName","buttonProps","type","body","document","ModalBase","element","createElement","appendChild","removeChild","createPortal","children","Modal","OptionGrid","numberTiles","confirmClick","cancelClick","Fragment","concat","xs","ys","length","flattenedRGB","reduce","hexStr","parseInt","substr","cvs","width","height","ctx","getContext","imgData","ImageData","Uint8ClampedArray","from","putImageData","toBlob","blob","saveAs","createGrid","num","initVal","Array","fill","Action","stackSender","stackReceiver","last_el","pop","push","addToUndoStack","result","undoStack","redoStack","shift","App","currentColor","showModal","down","target","getAttribute","split","col","rowArr","preventDefault","lastEl","handleChange","mouseDown","mouseUp","changeTileColor","clickTileColor","saveImageEvent","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"ocAKO,SAASA,EAAKC,GACpB,IAAMC,EAAU,CAACC,WAAYF,EAAMC,SACnC,OACC,yBACCE,UAAU,OACVC,aAAcJ,EAAMI,aACpBC,YAAaL,EAAMK,YACnBC,MAAOL,EACPM,MAAOP,EAAMO,QCPT,SAASC,EAAKR,GAAQ,IACpBS,EAA0DT,EAA1DS,KAAMC,EAAoDV,EAApDU,UAAWL,EAAyCL,EAAzCK,YAAaM,EAA4BX,EAA5BW,YAAaC,EAAeZ,EAAfY,WACnD,OACE,yBAAKF,UAAWA,EAAWL,YAAaA,GACtCI,EAAKI,KAAI,SAACC,EAAKC,GAAN,OACT,yBAAKZ,UAAU,MAAMa,IAAK,MAAMD,GAC9BD,EAAID,KAAI,SAACI,EAAOC,GAAR,OACR,kBAACnB,EAAD,CACCK,aAAcO,EACdV,QAASgB,EACTZ,YAAaO,EACbI,IAAG,cAASD,GAAT,OAAaG,GAChBX,MAAK,UAAKQ,EAAL,YAAUG,a,wDCVVC,G,OAAb,kDACC,WAAYnB,GAAQ,IAAD,8BAClB,cAAMA,IAEDoB,MAAQ,CAAClB,WAAY,UAAWmB,aAAa,GAClD,EAAKC,cAAgB,EAAKA,cAAcC,KAAnB,gBAJH,EADpB,wDAQaN,GACXO,KAAKC,SAAS,CAACvB,WAAYe,EAAMS,IAAKL,aAAa,IACnDG,KAAKxB,MAAM2B,SAASV,EAAMS,OAV5B,oCAaeE,GACbJ,KAAKC,SAAS,CAACJ,aAAcG,KAAKJ,MAAMC,gBAd1C,+BAkBE,IAAMJ,EAAQ,CAACf,WAAYsB,KAAKJ,MAAMlB,YAD9B,EAEyEsB,KAAKxB,MAA9E6B,EAFA,EAEAA,OAAQC,EAFR,EAEQA,UAAWC,EAFnB,EAEmBA,OAAQC,EAF3B,EAE2BA,WAAYC,EAFvC,EAEuCA,OAAQC,EAF/C,EAE+CA,WAAYC,EAF3D,EAE2DA,UACnE,OACC,yBAAKhC,UAAU,aAEL,4BAAQiC,MAAM,UAAUC,QAASR,GAChC,kBAAC,IAAD,CAAiBS,KAAMC,OAGxB,yBAAKpC,UAAU,gBACd,yBAAKA,UAAU,iBACbqB,KAAKJ,MAAMC,aACX,kBAAC,IAAD,CAAqBmB,eAAgBhB,KAAKF,eACzC,kBAAC,gBAAD,CACCL,MAAOO,KAAKJ,MAAMlB,WAClBuC,SAAUjB,KAAKb,YAAYY,KAAKC,UAKpC,4BAAQY,MAAM,eAAeC,QAASb,KAAKF,eAC1C,yBAAKnB,UAAU,QAAQG,MAAOW,MAIhC,4BAAQmB,MAAM,aAAaC,QAASP,GACnC,kBAAC,IAAD,CAAiBQ,KAAMI,OAGxB,4BAAQN,MAAM,OAAOC,QAASL,EAAYW,SAAUZ,GACnD,kBAAC,IAAD,CAAiBO,KAAMM,OAGxB,4BAAQR,MAAM,OAAOC,QAASH,EAAYS,SAAUV,GACnD,kBAAC,IAAD,CAAiBK,KAAMO,OAGxB,4BAAQT,MAAM,4BAA4BC,QAASF,GAClD,kBAAC,IAAD,CAAiBG,KAAMQ,YAxDrC,GAAiCC,IAAMC,Y,OCHhC,SAASC,EAAajD,GAAQ,IACzBkD,EAAqClD,EAArCkD,KAAMC,EAA+BnD,EAA/BmD,WAAeC,EADG,YACapD,EADb,uBAEhC,OACI,yBAAKG,UAAU,qBAElB,kBAAC,EAAgBiD,GAEZ,yBAAKjD,UAAU,kBACb,2BAAOkD,KAAK,OAAO9C,MAAO2C,EAAMT,SAAUU,M,WCThDG,EAAOC,SAASD,KAETE,EAAb,kDACC,WAAYxD,GAAQ,IAAD,8BAClB,cAAMA,IACDyD,QAAUF,SAASG,cAAc,OACtC,EAAKD,QAAQtD,UAAY,QAHP,EADpB,gEAQEmD,EAAKK,YAAYnC,KAAKiC,WARxB,6CAYEH,EAAKM,YAAYpC,KAAKiC,WAZxB,+BAgBE,OAAOI,uBAAarC,KAAKxB,MAAM8D,SAAUtC,KAAKiC,aAhBhD,GAA+BV,IAAMC,WAsB9B,SAASe,EAAM/D,GACrB,OACC,kBAAC,EAAD,KACC,yBAAKG,UAAU,mBACF,yBAAKA,UAAU,iBACZH,EAAM8D,Y,OC9BlB,SAASE,EAAT,GAAyE,IAApDC,EAAmD,EAAnDA,YAAaxB,EAAsC,EAAtCA,SAAUyB,EAA4B,EAA5BA,aAAcC,EAAc,EAAdA,YAC7D,OACE,kBAAC,IAAMC,SAAP,KACD,sDACI,4BAAQ7D,MAAO0D,EAAaxB,SAAUA,GACnC,4BAAQlC,MAAM,KAAd,aACA,4BAAQA,MAAM,KAAd,OACA,4BAAQA,MAAM,MAAd,SACA,4BAAQA,MAAM,MAAd,SACA,4BAAQA,MAAM,MAAd,UAEF,6BACA,4BAAQ8B,QAAS6B,EAAcvB,SAA0B,IAAhBsB,GAAzC,SACA,4BAAQ5B,QAAS8B,GAAjB,W,sBCSKhC,MAvBf,SAAmB1B,EAAMyC,GACrB,IAAMmB,EAAS,SAACC,EAAIC,GAAL,OAAYD,EAAGD,OAAOE,IAQ/BC,EAAS/D,EAAK+D,OACdC,EAAehE,EAClBiE,OAAOL,GACPxD,KAVe,SAAA8D,GAAM,MAAI,CAC1BC,SAASD,EAAOE,OAAO,EAAE,GAAI,IAC7BD,SAASD,EAAOE,OAAO,EAAE,GAAI,IAC7BD,SAASD,EAAOE,OAAO,EAAE,GAAI,IAC7B,QAOCH,OAAOL,GAEJS,EAAMvB,SAASG,cAAc,UACnCoB,EAAIC,MAAQD,EAAIE,OAASR,EACzB,IAAMS,EAAMH,EAAII,WAAW,MACrBC,EAAU,IAAIC,UAAUC,kBAAkBC,KAAKb,GAAeD,EAAQA,GAC5ES,EAAIM,aAAaJ,EAAS,EAAG,GAC7BL,EAAIU,QAAO,SAAAC,GAAI,OAAIC,IAAOD,EAAMvC,EAAO,UAAS,cClBrCyC,MAJf,SAAoBC,EAAKC,GACxB,OAAOC,MAAMF,GAAKG,KAAKD,MAAMF,GAAKG,KAAKF,KCDxC,SAASG,EAAOC,EAAaC,GAC5B,IAAMC,EAAUF,EAAYG,MAC5BF,EAAcG,KAAKF,GAGb,SAASG,EAAeC,EAAQC,EAAWC,GAMxB,IAArBA,EAAUjC,SACbiC,EAAUjC,OAAS,GAEK,KAArBgC,EAAUhC,QACbgC,EAAUE,QAGXF,EAAUH,KAAKE,G,WCuIDI,E,kDA7Ib,WAAY3G,GAAQ,IAAD,8BACjB,cAAMA,IACDS,KAAO,GACZ,EAAKW,MAAQ,CACXwF,aAAc,UACd3C,YAAa,EACb4C,WAAW,EACX3D,KAAM,WACNzC,KAAM,EAAKA,MAEb,EAAK+F,UAAY,GACjB,EAAKC,UAAY,GACjB,EAAKK,MAAO,EACZ,EAAKnG,YAAc,EAAKA,YAAYY,KAAjB,gBAbF,E,qDAgBVN,GACPO,KAAKC,SAAS,CAACmF,aAAc3F,M,kCAI7BqF,EAAe9E,KAAKf,KAAMe,KAAKgF,UAAWhF,KAAKiF,WAC/CjF,KAAKC,SAAS,CAAChB,KAAMe,KAAKf,S,kCAGhBmB,GAAI,IAAD,EACGA,EAAEmF,OAAOC,aAAa,SAASC,MAAM,KADxC,mBACTnG,EADS,KACJoG,EADI,KAEfpG,EAAM8D,SAAS9D,GACfoG,EAAMtC,SAASsC,GACf,IAAMzG,EAAI,YAAOe,KAAKJ,MAAMX,MACtB0G,EAAM,YAAO1G,EAAKK,IACxBqG,EAAOD,GAAO1F,KAAKJ,MAAMwF,aAEzBnG,EAAKK,GAAOqG,EACZ3F,KAAKC,SAAS,CAAChB,KAAMA,M,uCAGH,IAAD,EACMe,KAAKJ,MAAnBX,EADQ,EACRA,KAAMyC,EADE,EACFA,KACbf,EAAU1B,EAAMyC,K,gCAGRtB,GACTA,EAAEwF,iBACF5F,KAAKsF,MAAO,I,8BAGLlF,GACPA,EAAEwF,iBACF5F,KAAKsF,MAAO,EAEXR,EADiB9E,KAAKJ,MAAdX,KACae,KAAKgF,UAAWhF,KAAKiF,WAC1CjF,KAAKC,SAAS,M,sCAGAG,GACZJ,KAAKsF,MACRtF,KAAKb,YAAYiB,K,qCAIJA,GACdJ,KAAKb,YAAYiB,K,mCAGJA,GACXJ,KAAKC,SAAS,CAACwC,YAAaW,SAAShD,EAAEmF,OAAOxG,W,kCAI9CiB,KAAKC,SAAS,CAACoF,WAAW,M,qCAI1BrF,KAAKf,KAAOkF,EAAWnE,KAAKJ,MAAM6C,YAAa,WAC/CzC,KAAKgF,UAAUH,KAAK7E,KAAKf,MACzBe,KAAKC,SAAS,CACZhB,KAAMe,KAAKf,KACXoG,WAAW,EACX3D,KAAM,e,oCAKR1B,KAAKC,SAAS,CAACoF,WAAW,M,iCAGjBjF,GACTJ,KAAKC,SAAS,CAACyB,KAAMtB,EAAEmF,OAAOxG,U,mCAI9B,IDnFiBiG,EAAWC,ECmFtBY,GDnFWb,ECmFGhF,KAAKgF,UDnFGC,ECmFQjF,KAAKiF,UDlF5CT,EAAOQ,EAAWC,GACXD,EAAUA,EAAUhC,OAAO,ICkF/BhD,KAAKC,SAAS,CAAChB,KAAM4G,M,mCAIrB,IDnFiBb,ECmFXa,GDnFWb,ECmFGhF,KAAKgF,UDlF5BR,ECkFuCxE,KAAKiF,UDlF1BD,GACXA,EAAUA,EAAUhC,OAAO,ICkF/BhD,KAAKC,SAAS,CAAChB,KAAM4G,M,+BAItB,OACG,kBAAC,IAAMjD,SAAP,KACG5C,KAAKJ,MAAMyF,WACV,kBAAC9C,EAAD,KACE,kBAACC,EAAD,CACEC,YAAazC,KAAKJ,MAAM6C,YACxBxB,SAAUjB,KAAK8F,aAAa/F,KAAKC,MACjC0C,aAAc1C,KAAK0C,aAAa3C,KAAKC,MACrC2C,YAAa3C,KAAK2C,YAAY5C,KAAKC,SAI3C,yBAAKrB,UAAU,kBACX,kBAACK,EAAD,CACFC,KAAMe,KAAKJ,MAAMX,KACjBJ,YAAamB,KAAK+F,UAAUhG,KAAKC,MACjCd,UAAWc,KAAKgG,QAAQjG,KAAKC,MAC7Bb,YAAaa,KAAKiG,gBAAgBlG,KAAKC,MACvCZ,WAAYY,KAAKkG,eAAenG,KAAKC,SAGrC,kBAACyB,EAAD,CACEpB,OAAQL,KAAKqF,UAAUtF,KAAKC,MAC5BoF,aAAcpF,KAAKJ,MAAMwF,aACzBjF,SAAUH,KAAKG,SAASJ,KAAKC,MAC7BM,UAAWN,KAAKM,UAAUP,KAAKC,MAC/BO,OAAQP,KAAKgF,UAAUhC,OAAS,EAChCxC,WAAYR,KAAKQ,WAAWT,KAAKC,MACjCS,OAAkC,IAA1BT,KAAKiF,UAAUjC,OACvBtC,WAAYV,KAAKU,WAAWX,KAAKC,MACjCW,UAAWX,KAAKmG,eAAepG,KAAKC,MACpC2B,WAAY3B,KAAK2B,WAAW5B,KAAKC,MACjC0B,KAAM1B,KAAKJ,MAAM8B,Y,GAxITH,IAAMC,WCEJ4E,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF5E,SAAS6E,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a7690472.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './tile.css';\n\nexport function Tile(props) {\n\tconst bgColor = {background: props.bgColor}\n\treturn (\n\t\t<div \n\t\t\tclassName=\"tile\" \n\t\t\tonMouseEnter={props.onMouseEnter} \n\t\t\tonMouseDown={props.onMouseDown}\n\t\t\tstyle={bgColor}\n\t\t\tvalue={props.value}\n\t\t>\n\t\t</div>\n\t\t)\n}\n\nTile.propTypes = {\n\tonMouseEnter: PropTypes.func,\n\tonMouseDown: PropTypes.func,\n\tbgColor: PropTypes.string,\n}","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './grid.css'\n\nimport { Tile } from 'component/Tile/Tile';\n\nexport function Grid(props) {\n\tconst { grid, onMouseUp, onMouseDown, changeColor, clickColor } = props;\n\treturn (\n\t\t\t<div onMouseUp={onMouseUp} onMouseDown={onMouseDown}>\n\t\t\t\t{grid.map((row, i) =>\n\t\t\t\t\t<div className=\"row\" key={'row'+i}>\n\t\t\t\t\t\t{row.map((color, j) => \n\t\t\t\t\t\t\t<Tile \n\t\t\t\t\t\t\t\tonMouseEnter={changeColor} \n\t\t\t\t\t\t\t\tbgColor={color} \n\t\t\t\t\t\t\t\tonMouseDown={clickColor} \n\t\t\t\t\t\t\t\tkey={`tile${i}${j}`}\n\t\t\t\t\t\t\t\tvalue={`${i} ${j}`}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\t)\n}\n\nGrid.propTypes = {\n\tgrid: PropTypes.array.isRequired,\n\tonMouseUp: PropTypes.func.isRequired,\n\tonMouseDown: PropTypes.func.isRequired,\n\tchangeColor: PropTypes.func.isRequired,\n\tclickColor: PropTypes.func.isRequired\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport OutsideClickHandler from 'react-outside-click-handler';\nimport { CompactPicker } from 'react-color';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faFile, faUndoAlt, faRedoAlt, faEraser, faDownload } from '@fortawesome/free-solid-svg-icons';\nimport './btn-group.css';\n\nexport class ButtonGroup extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\t//this.state = {background: this.props.currentColor, showPalette: false}\n\t\tthis.state = {background: '#333333', showPalette: false}\n\t\tthis.togglePalette = this.togglePalette.bind(this);\n\t}\n\n\tchangeColor(color) {\n\t\tthis.setState({background: color.hex, showPalette: false})\n\t\tthis.props.getColor(color.hex);\n\t}\n\n\ttogglePalette(e) {\n\t\tthis.setState({showPalette: !this.state.showPalette})\n\t}\n\n\trender() {\n\t\tconst color = {background: this.state.background}\n\t\tconst { newArt, clearGrid, isUndo, handleUndo, isRedo, handleRedo, saveImage } = this.props;\n\t\treturn (\n\t\t\t<div className=\"btn-group\">\n\n            \t<button title=\"New Art\" onClick={newArt}>\n            \t\t<FontAwesomeIcon icon={faFile} />\n            \t</button>\n\n            \t<div className=\"color-change\">\n            \t\t<div className=\"color-palette\">\n            \t\t\t{this.state.showPalette &&\n            \t\t\t\t<OutsideClickHandler onOutsideClick={this.togglePalette}> \n            \t\t\t\t\t<CompactPicker \n            \t\t\t\t\t\tcolor={this.state.background}\n            \t\t\t\t\t\tonChange={this.changeColor.bind(this)} \n            \t\t\t\t\t/>\n            \t\t\t\t</OutsideClickHandler>\n            \t\t\t}\n            \t\t</div>\n            \t\t<button title=\"Change Color\" onClick={this.togglePalette}>\n            \t\t\t<div className=\"color\" style={color}></div>\n            \t\t</button>\n            \t</div>\n            \t\n            \t<button title=\"Clear Grid\" onClick={clearGrid}>\n            \t\t<FontAwesomeIcon icon={faEraser} />\n            \t</button>\n            \t\n            \t<button title=\"Undo\" onClick={handleUndo} disabled={isUndo}>\n            \t\t<FontAwesomeIcon icon={faUndoAlt} />\n            \t</button>\n            \t\n            \t<button title=\"Redo\" onClick={handleRedo} disabled={isRedo}>\n            \t\t<FontAwesomeIcon icon={faRedoAlt} />\n            \t</button>\n            \t\n            \t<button title=\"Download to your Computer\" onClick={saveImage}>\n            \t\t<FontAwesomeIcon icon={faDownload} />\n            \t</button>\n\n          \t</div>\n        )\n\t}\n}\n\nfunction hexColorPropType(props, propName, componentName) {\n\tconst value = props[propName];\n\n\tif (!value) {\n\t\treturn new Error('Require value')\n\t}\n\n\tif (typeof value !== 'string' || value[0] !== '#') {\n\t\treturn new Error(\n\t\t\t\t`Invalid prop ${propName} supplied to ${componentName}.\n\t\t\t\tProp value must be a string hex color code`\n\t\t\t)\n\t}\n\treturn null\n}\n\nButtonGroup.propTypes = {\n\tnewArt: PropTypes.func.isRequired,\n\tclearGrid: PropTypes.func.isRequired,\n\tisUndo: PropTypes.bool.isRequired,\n\thandleUndo: PropTypes.func.isRequired,\n\tisRedo: PropTypes.bool.isRequired,\n\thandleRedo: PropTypes.func.isRequired,\n\tsaveImage: PropTypes.func.isRequired,\n\tcurrentColor: hexColorPropType,\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { ButtonGroup } from 'component/ButtonGroup/ButtonGroup';\nimport './control.css'\n\nexport function ControlGroup(props) {\n    const { name, changeName, ...buttonProps } = props;\n    return (\n        <div className=\"control-container\">\n\n\t\t\t\t\t<ButtonGroup {...buttonProps}\t/>\n\n          <div className=\"name-container\">\n            <input type=\"text\" value={name} onChange={changeName} />\n          </div>\n        </div>\n    )\n}\n\nControlGroup.propTypes = {\n\tname: PropTypes.string.isRequired,\n\tchangeName: PropTypes.func.isRequired\n}","import React from 'react';\nimport { createPortal } from 'react-dom';\nimport './modal.css'\n\nconst body = document.body;\n\nexport class ModalBase extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.element = document.createElement('div');\n\t\tthis.element.className = 'modal'\n\t}\n\n\tcomponentDidMount() {\n\t\tbody.appendChild(this.element);\n\t}\n\n\tcomponentWillUnmount() {\n\t\tbody.removeChild(this.element);\n\t}\n\n\trender() {\n\t\treturn createPortal(this.props.children, this.element)\n\t}\n\n}\n\n\nexport function Modal(props) {\n\treturn (\n\t\t<ModalBase>\n\t\t\t<div className=\"modal-container\">\n                <div className=\"modal-content\">\n                  {props.children}\n                </div>\n            </div>\n        </ModalBase>\n\t)\n}","import React from 'react';\nimport './option-grid.css';\n\nexport function OptionGrid({numberTiles, onChange, confirmClick, cancelClick}) {\n    return (\n      <React.Fragment>\n\t\t\t\t\t<p>Choose number of tiles:</p>\n        \t<select value={numberTiles} onChange={onChange}>\n            <option value=\"0\">Choose...</option>\n            <option value=\"8\">8x8</option>\n            <option value=\"16\">16x16</option>\n            <option value=\"24\">24x24</option>\n            <option value=\"32\">32x32</option>\n          </select>\n          <br />\n          <button onClick={confirmClick} disabled={numberTiles === 0}>Apply</button>\n          <button onClick={cancelClick}>Cancel</button>\n\t\t\t</React.Fragment>\n    )\n}","import saveAs from 'file-saver'; \n\nfunction saveImage(grid, name) {\n    const concat = (xs, ys) => xs.concat(ys);\n    const hexToRGBA = hexStr => [\n      parseInt(hexStr.substr(1,2), 16),\n      parseInt(hexStr.substr(3,2), 16),\n      parseInt(hexStr.substr(5,2), 16),\n      255\n    ];\n    \n    const length = grid.length;\n    const flattenedRGB = grid\n      .reduce(concat)\n      .map(hexToRGBA)\n      .reduce(concat);\n\n    const cvs = document.createElement('canvas');\n    cvs.width = cvs.height = length;\n    const ctx = cvs.getContext('2d');\n    const imgData = new ImageData(Uint8ClampedArray.from(flattenedRGB), length, length);\n    ctx.putImageData(imgData, 0, 0);\n    cvs.toBlob(blob => saveAs(blob, name + '.png'), 'image/png');\n  }\n\nexport default saveImage","function createGrid(num, initVal) {\n\treturn Array(num).fill(Array(num).fill(initVal));\n}\n\nexport default createGrid;","function Action(stackSender, stackReceiver) {\n\tconst last_el = stackSender.pop()\n\tstackReceiver.push(last_el)\n}\n\nexport function addToUndoStack(result, undoStack, redoStack) {\n\t/**\n\t*When user trigger a certain action\n\t*add the result of that action\n\t*into undoStack\n\t*/\n\tif (redoStack.length !== 0) {\n\t\tredoStack.length = 0;\n\t}\n\tif (undoStack.length === 20) {\n\t\tundoStack.shift()\n\t}\n\n\tundoStack.push(result);\n}\n\nexport function undo(undoStack, redoStack) {\n\tAction(undoStack, redoStack);\n\treturn undoStack[undoStack.length-1];\n}\n\nexport function redo(undoStack, redoStack) {\n\tAction(redoStack, undoStack);\n\treturn undoStack[undoStack.length-1];\n}","import React from 'react';\nimport { Grid } from 'component/Grid/Grid';\nimport { ControlGroup } from 'component/ControlGroup/ControlGroup';\nimport { Modal } from 'component/Modal/Modal';\nimport { OptionGrid } from 'component/OptionGrid/OptionGrid';\nimport saveImage from 'utils/saveImage';\nimport createGrid from 'utils/genGrid';\nimport { addToUndoStack, undo, redo } from 'utils/undoRedo';\nimport './App.css';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.grid = [];\n    this.state = {\n      currentColor: '#333333',\n      numberTiles: 0,\n      showModal: true,\n      name: 'Untitled',\n      grid: this.grid,\n    }\n    this.undoStack = [];\n    this.redoStack = [];\n    this.down = false;\n    this.changeColor = this.changeColor.bind(this);\n  }\n\n  getColor(color) {\n    this.setState({currentColor: color})\n  }\n\n  clearGrid() {\n    addToUndoStack(this.grid, this.undoStack, this.redoStack)\n    this.setState({grid: this.grid});\n  }\n\n  changeColor(e) {\n  \tlet [row, col] = e.target.getAttribute('value').split(' ')\n\t\trow = parseInt(row);\n\t\tcol = parseInt(col);\n\t\tconst grid = [...this.state.grid]\n\t\tconst rowArr = [...grid[row]]\n\t\trowArr[col] = this.state.currentColor;\n\n\t\tgrid[row] = rowArr;\n\t\tthis.setState({grid: grid})\n  }\n\n  saveImageEvent() {\n    const {grid, name} = this.state\n    saveImage(grid, name)\n  }\n\n  mouseDown(e) {\n  \te.preventDefault()\n  \tthis.down = true\n  }\n\n  mouseUp(e) {\n  \te.preventDefault()\n  \tthis.down = false;\n    const { grid } = this.state;\n    addToUndoStack(grid, this.undoStack, this.redoStack);\n    this.setState({})\n  }\n\n  changeTileColor(e) {\n\t\tif (this.down) {\n\t\t\tthis.changeColor(e)\n\t\t}\n\t}\n\n\tclickTileColor(e) {\n\t\tthis.changeColor(e)\n\t}\n\n  handleChange(e) {\n    this.setState({numberTiles: parseInt(e.target.value)})\n  }\n\n  showModal() {\n    this.setState({showModal: true})\n  }\n\n  confirmClick() {\n    this.grid = createGrid(this.state.numberTiles, '#ffffff');\n    this.undoStack.push(this.grid);\n    this.setState({\n      grid: this.grid, \n      showModal: false, \n      name: \"Untitled\",\n    })\n  }\n\n  cancelClick() {\n    this.setState({showModal: false})\n  }\n\n  changeName(e) {\n    this.setState({name: e.target.value})\n  }\n\n  handleUndo() {\n    const lastEl = undo(this.undoStack, this.redoStack);\n    this.setState({grid: lastEl});\n  }\n\n  handleRedo() {\n    const lastEl = redo(this.undoStack, this.redoStack);\n    this.setState({grid: lastEl});\n  }\n\n  render() {\n  \treturn (\n      <React.Fragment>\n        {this.state.showModal &&\n          <Modal>\n            <OptionGrid \n              numberTiles={this.state.numberTiles}\n              onChange={this.handleChange.bind(this)}\n              confirmClick={this.confirmClick.bind(this)}\n              cancelClick={this.cancelClick.bind(this)}\n            />\n          </Modal>\n        }\n  \t\t  <div className=\"grid-container\">\n          <Grid \n  \t\t\t\t  grid={this.state.grid}\n  \t\t\t\t  onMouseDown={this.mouseDown.bind(this)}\n  \t\t\t\t  onMouseUp={this.mouseUp.bind(this)}\n  \t\t\t\t  changeColor={this.changeTileColor.bind(this)}\n  \t\t\t\t  clickColor={this.clickTileColor.bind(this)}\n  \t\t\t />\n  \t\t  </div>\n        <ControlGroup\n          newArt={this.showModal.bind(this)}\n          currentColor={this.state.currentColor} \n          getColor={this.getColor.bind(this)}\n          clearGrid={this.clearGrid.bind(this)}\n          isUndo={this.undoStack.length < 2}\n          handleUndo={this.handleUndo.bind(this)}\n          isRedo={this.redoStack.length === 0}\n          handleRedo={this.handleRedo.bind(this)}\n          saveImage={this.saveImageEvent.bind(this)}\n          changeName={this.changeName.bind(this)}\n          name={this.state.name}\n        />\n      </React.Fragment>\n  \t)\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}